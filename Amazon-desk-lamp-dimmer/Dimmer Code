#include <PWM.h>

#define ENCODER_CLK 3
#define ENCODER_DT 4
#define ENCODER_SW 5

// Define pins for the LEDs
int32_t frequency = 10000;
#define LED1 9
#define LED2 10

// Variables to keep track of the encoder rotation and button state
volatile int brightnessWhite = 15;        // Initial brightness
volatile int brightnessAmber = 15;        // Initial brightness
volatile int brightnessBothOnWhite = 0;  // Initial brightness both on White
volatile int brightnessBothOnAmber = 30;  // Initial brightness both on White
volatile int ledState = 0;               // 0: LED1, 1: LED2, 2: Both on

// Variables to keep track of the last encoder states
volatile bool lastCLK;
volatile bool lastSW;

// Variables for debouncing
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;
unsigned long buttonPressTime = 0;
bool buttonPressed = false;
bool buttonHeld = false;
unsigned long holdTime = 1000;  // 2 seconds hold time

void setup() {
  //makes all timers safe except timer 0 available for setting
  InitTimersSafe();
  SetPinFrequencySafe(LED1, frequency);
  SetPinFrequencySafe(LED2, frequency);
  // Initialize serial communication
  //Serial.begin(9600);

  // Set pin modes for the rotary encoder
  pinMode(ENCODER_CLK, INPUT_PULLUP);
  pinMode(ENCODER_DT, INPUT_PULLUP);
  pinMode(ENCODER_SW, INPUT_PULLUP);

  // Set pin modes for the LEDs
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);

  // Attach interrupts for the encoder
  attachInterrupt(digitalPinToInterrupt(ENCODER_CLK), updateEncoder, CHANGE);
  // No interrupt for the switch; we'll handle it in the loop

  // Initialize the last states
  lastCLK = digitalRead(ENCODER_CLK);
  lastSW = digitalRead(ENCODER_SW);
}

void loop() {
  // Update the LED brightness based on the current state
  if (ledState == 0) {
    pwmWrite(LED1, brightnessWhite);
    pwmWrite(LED2, 0);
  } else if (ledState == 1) {
    pwmWrite(LED1, 0);
    pwmWrite(LED2, brightnessAmber);
  } else if (ledState == 2) {
    pwmWrite(LED1, brightnessBothOnWhite);
    pwmWrite(LED2, brightnessBothOnAmber);
  }

  // Check the switch state for debouncing
  int reading = digitalRead(ENCODER_SW);

  // If the switch state has changed
  if (reading != lastSW) {
    // Reset the debounce timer
    lastDebounceTime = millis();
    // If the switch is pressed
    if (reading == LOW && !buttonPressed) {
      buttonPressed = true;
      buttonPressTime = millis();
      buttonHeld = false;
    }
    // If the switch is released
    else if (reading == HIGH && buttonPressed) {
      buttonPressed = false;
      // If the button was not held
      if (!buttonHeld) {
        // Change the LED state
        ledState = (ledState + 1) % 3;

        // Print the new LED state for debugging
        ////Serial.print("LED State changed: ");
        ////Serial.println(ledState);
      }
    }
  }

  // Check if the button is held
  if (buttonPressed && (millis() - buttonPressTime >= holdTime)) {
    buttonHeld = true;
    // Turn off both LEDs
    analogWrite(LED1, 0);
    analogWrite(LED2, 0);
    ledState = 3;  // Indicate that LEDs are off
    ////Serial.println("Both LEDs turned off");
  }

  // Update the last switch state
  lastSW = reading;

  // Print the current state for debugging
  //Serial.print("LED State: ");
  //Serial.print(ledState);
  //Serial.print(" | Brightness White: ");
  //Serial.print(brightnessWhite);
  //Serial.print(" | Brightness Amber: ");
  //Serial.print(brightnessAmber);
  //Serial.print(" | Brightness Both: ");
  //Serial.print(brightnessBothOnWhite);
  //Serial.print(" / ");
  //Serial.println(brightnessBothOnAmber);

  // Small delay for debounce
  delay(100);
}

void updateEncoder() {
  // Read the current state of the encoder
  bool currentCLK = digitalRead(ENCODER_CLK);
  bool currentDT = digitalRead(ENCODER_DT);

  // If the CLK state has changed
  if (currentCLK != lastCLK && currentCLK == LOW) {
    // If the DT state is different from the CLK state
    if (currentDT != currentCLK) {
      if (ledState == 0) {
        brightnessWhite += 5;
      } else if (ledState == 1) {
        brightnessAmber += 5;
      } else if (ledState == 2) {
        brightnessBothOnWhite += 5;
        brightnessBothOnAmber += 5;
      }
    } else {
      // Counterclockwise rotation
      if (ledState == 0) {
        brightnessWhite -= 5;
      } else if (ledState == 1) {
        brightnessAmber -= 5;
      } else if (ledState == 2) {
        brightnessBothOnWhite -= 5;
        brightnessBothOnAmber -= 5;
      }
    }
  }
  // Clamp brightness to valid range
  brightnessWhite = constrain(brightnessWhite, 0, 100);
  brightnessAmber = constrain(brightnessAmber, 0, 150);
  brightnessBothOnWhite = constrain(brightnessBothOnWhite, 0, 80);
  brightnessBothOnAmber = constrain(brightnessBothOnAmber, 30, 110);
  // Update the last states
  lastCLK = currentCLK;
}
